<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project xmlns:con="http://eviware.com/soapui/config" id="16c28e6f-cd4e-44a7-b56d-930d09ea4c29"
                    activeEnvironment="Default" name="Github Rest Api" resourceRoot="" soapui-version="5.5.0">
    <con:settings/>
    <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RestService"
                   id="328d8f7c-a911-4084-bdda-07ac56deb549" wadlVersion="http://wadl.dev.java.net/2009/02"
                   name="http://localhost:8080" type="rest">
        <con:settings/>
        <con:definitionCache/>
        <con:endpoints>
            <con:endpoint>http://LAPTOP-0TCQKCF7:8089/</con:endpoint>
            <con:endpoint>http://localhost:8080</con:endpoint>
        </con:endpoints>
        <con:resource name="get all users" path="/github/api/v1/users" id="a9831900-e33d-431f-a703-901db595b667">
            <con:settings/>
            <con:parameters/>
            <con:method name="Users 1" id="cd7d3c82-31f9-4dec-9a7d-40c50540700d" method="GET">
                <con:settings/>
                <con:parameters/>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element>Response</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element>Response</con:element>
                </con:representation>
                <con:request name="Request 1" id="07c58481-8c91-46f5-be1f-d8a911819bfc" mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters/>
                </con:request>
            </con:method>
        </con:resource>
        <con:resource name="get single user" path="/github/api/v1/users/spring"
                      id="42310172-1132-42d7-b611-314a6636f281">
            <con:settings/>
            <con:parameters>
                <con:parameter>
                    <con:name>userName</con:name>
                    <con:style>TEMPLATE</con:style>
                </con:parameter>
            </con:parameters>
            <con:method name="Method 1" id="dfc9fe07-24cf-43f9-812a-4ef3fc1ac08a" method="GET">
                <con:settings/>
                <con:parameters/>
                <con:representation type="FAULT">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>500 404</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Fault</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Response</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Response</con:element>
                </con:representation>
                <con:request name="Request 1" id="8bb6626c-008d-4fe2-8f9c-347b97b49494" mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters/>
                    <con:parameterOrder>
                        <con:entry>userName</con:entry>
                    </con:parameterOrder>
                </con:request>
            </con:method>
        </con:resource>
        <con:resource name="get user repos" path="/github/api/v1/users/{user_name}/repos"
                      id="42310172-1132-42d7-b611-314a6636f281">
            <con:settings/>
            <con:parameters>
                <con:parameter>
                    <con:name>user_name</con:name>
                    <con:style>TEMPLATE</con:style>
                </con:parameter>
            </con:parameters>
            <con:method name="Method 1" id="dfc9fe07-24cf-43f9-812a-4ef3fc1ac08a" method="GET">
                <con:settings/>
                <con:parameters/>
                <con:representation type="FAULT">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>500</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Fault</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Response</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element>Response</con:element>
                </con:representation>
                <con:request name="Request database user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                             mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <entry key="user_name" value="amdouni-mohamed-ali" xmlns="http://eviware.com/soapui/config"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>user_name</con:entry>
                    </con:parameterOrder>
                </con:request>
                <con:request name="Request Github user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                             mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <entry key="user_name" value="spring" xmlns="http://eviware.com/soapui/config"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>user_name</con:entry>
                    </con:parameterOrder>
                </con:request>
            </con:method>
        </con:resource>
        <con:resource name="get user repo" path="/github/api/v1/users/{userName}/repos/{repoName}"
                      id="42310172-1132-42d7-b611-314a6636f281">
            <con:settings/>
            <con:parameters>
                <con:parameter>
                    <con:name>userName</con:name>
                    <con:style>TEMPLATE</con:style>
                </con:parameter>
                <con:parameter>
                    <con:name>repoName</con:name>
                    <con:value>Shared</con:value>
                    <con:style>TEMPLATE</con:style>
                    <con:default>Shared</con:default>
                </con:parameter>
            </con:parameters>
            <con:method name="Method 1" id="dfc9fe07-24cf-43f9-812a-4ef3fc1ac08a" method="GET">
                <con:settings/>
                <con:parameters/>
                <con:representation type="FAULT">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>500 404</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Fault</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json;charset=UTF-8</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element xmlns:spr="http://localhost/github/api/v1/users/spring">spr:Response</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType xsi:nil="true"/>
                    <con:status>0</con:status>
                    <con:params/>
                    <con:element>data</con:element>
                </con:representation>
                <con:representation type="RESPONSE">
                    <con:mediaType>application/json</con:mediaType>
                    <con:status>200</con:status>
                    <con:params/>
                    <con:element>Response</con:element>
                </con:representation>
                <con:request name="Request database user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                             mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <con:entry key="repoName" value="jaxb-examples"/>
                        <con:entry key="userName" value="amdouni-mohamed-ali"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>userName</con:entry>
                        <con:entry>repoName</con:entry>
                    </con:parameterOrder>
                </con:request>
                <con:request name="Request Github user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                             mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <con:entry key="repoName" value="Shard"/>
                        <con:entry key="userName" value="spring"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>userName</con:entry>
                        <con:entry>repoName</con:entry>
                    </con:parameterOrder>
                </con:request>
                <con:request name="Request unknown user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                             mediaType="application/json">
                    <con:settings>
                        <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/>
                        </con:setting>
                    </con:settings>
                    <con:endpoint>http://localhost:8080</con:endpoint>
                    <con:request/>
                    <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                    <con:credentials>
                        <con:authType>No Authorization</con:authType>
                    </con:credentials>
                    <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                    <con:jmsPropertyConfig/>
                    <con:parameters>
                        <con:entry key="repoName" value="mysql-connector-cpp"/>
                        <con:entry key="userName" value="mysql"/>
                    </con:parameters>
                    <con:parameterOrder>
                        <con:entry>userName</con:entry>
                        <con:entry>repoName</con:entry>
                    </con:parameterOrder>
                </con:request>
            </con:method>
        </con:resource>
    </con:interface>
    <con:testSuite id="fd0a4f24-a6ca-40af-a614-2afa3dfc145f" name="http://localhost:8080 TestSuite">
        <con:description>TestSuite generated for REST Service [http://localhost:8080]</con:description>
        <con:settings/>
        <con:runType>SEQUENTIAL</con:runType>
        <con:testCase id="78436bab-4b82-4297-a739-1b67e1af2327" failOnError="true" failTestCaseOnErrors="true"
                      keepSession="false" maxResults="0" name="get all users TestCase" searchProperties="true">
            <con:description>TestCase generated for REST Resource [get all users] located at [/github/api/v1/users]
            </con:description>
            <con:settings/>
            <con:testStep type="restrequest" name="Request 1" id="78662f19-4437-4ce4-b3b1-23888af10677">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users" methodName="Users 1" xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request 1" id="07c58481-8c91-46f5-be1f-d8a911819bfc"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters/>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:loadTest id="51286d9d-65fb-44c1-a8b1-2fafa2e33547" name="LoadTest 1">
                <con:settings/>
                <con:threadCount>5</con:threadCount>
                <con:startDelay>0</con:startDelay>
                <con:sampleInterval>250</con:sampleInterval>
                <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
                <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
                <con:historyLimit>-1</con:historyLimit>
                <con:testLimit>60</con:testLimit>
                <con:limitType>TIME</con:limitType>
                <con:loadStrategy>
                    <con:type>Simple</con:type>
                </con:loadStrategy>
                <con:assertion type="Step Status" name="Step Status"/>
                <con:maxAssertionErrors>100</con:maxAssertionErrors>
                <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
                <con:strategyInterval>500</con:strategyInterval>
            </con:loadTest>
            <con:properties/>
        </con:testCase>
        <con:testCase id="451717bd-4ccb-4284-ab66-9650f7081207" failOnError="true" failTestCaseOnErrors="true"
                      keepSession="false" maxResults="0" name="get single user TestCase" searchProperties="true">
            <con:description>TestCase generated for REST Resource [get single user] located at
                [/github/api/v1/users/spring]
            </con:description>
            <con:settings/>
            <con:testStep type="restrequest" name="Request 1" id="9fea3573-3d53-4e66-9864-ea07fab0670a">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/spring" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request 1" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters/>
                        <con:parameterOrder>
                            <con:entry>userName</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:loadTest id="2254df28-daf1-4ef4-8b6a-399308729e1f" name="LoadTest 1">
                <con:settings/>
                <con:threadCount>5</con:threadCount>
                <con:startDelay>0</con:startDelay>
                <con:sampleInterval>250</con:sampleInterval>
                <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
                <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
                <con:historyLimit>-1</con:historyLimit>
                <con:testLimit>60</con:testLimit>
                <con:limitType>TIME</con:limitType>
                <con:loadStrategy>
                    <con:type>Simple</con:type>
                </con:loadStrategy>
                <con:assertion type="Step Status" name="Step Status"/>
                <con:maxAssertionErrors>100</con:maxAssertionErrors>
                <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
                <con:strategyInterval>500</con:strategyInterval>
            </con:loadTest>
            <con:properties/>
        </con:testCase>
        <con:testCase id="b644a9d8-be19-4aad-997e-caf558424afc" failOnError="true" failTestCaseOnErrors="true"
                      keepSession="false" maxResults="0" name="get user repos TestCase" searchProperties="true">
            <con:description>TestCase generated for REST Resource [get user repos] located at
                [/github/api/v1/users/{user_name}/repos]
            </con:description>
            <con:settings/>
            <con:testStep type="restrequest" name="Request database user" id="4879580d-ff83-4919-aa2d-5e2358bf0a12">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/{user_name}/repos" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request database user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <entry key="user_name" value="amdouni-mohamed-ali"
                                   xmlns="http://eviware.com/soapui/config"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>user_name</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:testStep type="restrequest" name="Request Github user" id="c86f95f2-ffa4-4f01-abd1-b7fc08fe82d4">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/{user_name}/repos" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request Github user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <entry key="user_name" value="spring" xmlns="http://eviware.com/soapui/config"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>user_name</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:loadTest id="ea7b83ff-c3a6-4cc4-9f76-da9e4c0468a3" name="LoadTest 1">
                <con:settings/>
                <con:threadCount>5</con:threadCount>
                <con:startDelay>0</con:startDelay>
                <con:sampleInterval>250</con:sampleInterval>
                <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
                <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
                <con:historyLimit>-1</con:historyLimit>
                <con:testLimit>60</con:testLimit>
                <con:limitType>TIME</con:limitType>
                <con:loadStrategy>
                    <con:type>Simple</con:type>
                </con:loadStrategy>
                <con:assertion type="Step Status" name="Step Status"/>
                <con:maxAssertionErrors>100</con:maxAssertionErrors>
                <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
                <con:strategyInterval>500</con:strategyInterval>
            </con:loadTest>
            <con:properties/>
        </con:testCase>
        <con:testCase id="a072d3c9-612a-48c6-9273-3c3df3c8164a" failOnError="true" failTestCaseOnErrors="true"
                      keepSession="false" maxResults="0" name="get user repo TestCase" searchProperties="true">
            <con:description>TestCase generated for REST Resource [get user repo] located at
                [/github/api/v1/users/{userName}/repos/{repoName}]
            </con:description>
            <con:settings/>
            <con:testStep type="restrequest" name="Request database user" id="7ec50590-0951-4804-96b7-024214a7c531">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/{userName}/repos/{repoName}" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request database user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <con:entry key="repoName" value="jaxb-examples"/>
                            <con:entry key="userName" value="amdouni-mohamed-ali"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>userName</con:entry>
                            <con:entry>repoName</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:testStep type="restrequest" name="Request Github user" id="de8f7c1f-f092-48c5-baad-a7373b4c935d">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/{userName}/repos/{repoName}" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request Github user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <con:entry key="repoName" value="Shard"/>
                            <con:entry key="userName" value="spring"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>userName</con:entry>
                            <con:entry>repoName</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:testStep type="restrequest" name="Request unknown user" id="813057df-4f33-4dd1-83a4-4c5e39958486">
                <con:settings/>
                <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="http://localhost:8080"
                            resourcePath="/github/api/v1/users/{userName}/repos/{repoName}" methodName="Method 1"
                            xsi:type="con:RestRequestStep">
                    <con:restRequest name="Request unknown user" id="8bb6626c-008d-4fe2-8f9c-347b97b49494"
                                     mediaType="application/json">
                        <con:settings>
                            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
                        </con:settings>
                        <con:endpoint>http://localhost:8080</con:endpoint>
                        <con:request/>
                        <con:originalUri>http://localhost/github/api/v1/users/spring</con:originalUri>
                        <con:credentials>
                            <con:authType>No Authorization</con:authType>
                        </con:credentials>
                        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
                        <con:jmsPropertyConfig/>
                        <con:parameters>
                            <con:entry key="repoName" value="mysql-connector-cpp"/>
                            <con:entry key="userName" value="mysql"/>
                        </con:parameters>
                        <con:parameterOrder>
                            <con:entry>userName</con:entry>
                            <con:entry>repoName</con:entry>
                        </con:parameterOrder>
                    </con:restRequest>
                </con:config>
            </con:testStep>
            <con:loadTest id="5dfcaab9-4edc-4f53-83b2-f758289f61d4" name="LoadTest 1">
                <con:settings/>
                <con:threadCount>5</con:threadCount>
                <con:startDelay>0</con:startDelay>
                <con:sampleInterval>250</con:sampleInterval>
                <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
                <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
                <con:historyLimit>-1</con:historyLimit>
                <con:testLimit>60</con:testLimit>
                <con:limitType>TIME</con:limitType>
                <con:loadStrategy>
                    <con:type>Simple</con:type>
                </con:loadStrategy>
                <con:assertion type="Step Status" name="Step Status"/>
                <con:maxAssertionErrors>100</con:maxAssertionErrors>
                <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
                <con:strategyInterval>500</con:strategyInterval>
            </con:loadTest>
            <con:properties/>
        </con:testCase>
        <con:properties/>
    </con:testSuite>
    <con:restMockService id="10e83f8a-7433-4528-9a91-04beb87b36bb" port="8089" path="/" host="LAPTOP-0TCQKCF7"
                         name="REST MockService">
        <con:settings/>
        <con:properties/>
        <con:restMockAction name="/github/api/v1/users" method="GET" resourcePath="/github/api/v1/users"
                            id="812d6e27-27b3-459f-bfb6-2d028edce919">
            <con:settings/>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>/*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") )
                {
                // return the name of the response you want to dispatch
                return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") )
                {
                // return the name of the response you want to dispatch
                return "Response Stockholm"
                }
                else if( queryString.contains("london") )
                {
                // return the name of the response you want to dispatch
                return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") )
                {
                // return the name of the response you want to dispatch
                return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") )
                {
                // return the name of the response you want to dispatch
                return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="0744d6e2-05e1-4a44-9587-8a9618efa91c" httpResponseStatus="200"
                          mediaType="application/json">
                <con:settings/>
                <con:responseContent>[
                    "mock-service",
                    "amdouni-mohamed-ali",
                    "mysql"
                    ]
                </con:responseContent>
            </con:response>
        </con:restMockAction>
        <con:restMockAction name="/github/api/v1/users/spring" method="GET" resourcePath="/github/api/v1/users/spring"
                            id="bf347b83-25a2-43d4-9169-736e3ccd4eeb">
            <con:settings/>
            <con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>/*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") )
                {
                // return the name of the response you want to dispatch
                return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") )
                {
                // return the name of the response you want to dispatch
                return "Response Stockholm"
                }
                else if( queryString.contains("london") )
                {
                // return the name of the response you want to dispatch
                return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") )
                {
                // return the name of the response you want to dispatch
                return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") )
                {
                // return the name of the response you want to dispatch
                return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="6617418e-6b65-4e6b-aed9-24cb3c59a28d" httpResponseStatus="200"
                          mediaType="application/json">
                <con:settings/>
                <con:responseContent>{
                    "id": 41930,
                    "login": "mock-spring",
                    "url": "https://api.github.com/users/spring",
                    "type": "Organization",
                    "name": "Spring RTS",
                    "location": null,
                    "email": null,
                    "repositories": [
                    {
                    "id": 2017841,
                    "name": "assimp",
                    "description": "Open Asset Import Library with spring patches - when merging upstream always
                    --rebase",
                    "url": "https://api.github.com/repos/spring/assimp",
                    "fork": true,
                    "language": "C++",
                    "full_name": "spring/assimp",
                    "default_branch": "spring"
                    },
                    {
                    "id": 3802533,
                    "name": "ChanServ",
                    "description": "The ChanServ lobby bot, to be used with a Spring lobby server",
                    "url": "https://api.github.com/repos/spring/ChanServ",
                    "fork": true,
                    "language": "Java",
                    "full_name": "spring/ChanServ",
                    "default_branch": "master"
                    },
                    {
                    "id": 143701050,
                    "name": "CircuitAI",
                    "description": "Spring RTS local native AI",
                    "url": "https://api.github.com/repos/spring/CircuitAI",
                    "fork": true,
                    "language": "C++",
                    "full_name": "spring/CircuitAI",
                    "default_branch": "master"
                    },
                    {
                    "id": 53094566,
                    "name": "devgame.sdd",
                    "description": "automated tests for the spring rts engine",
                    "url": "https://api.github.com/repos/spring/devgame.sdd",
                    "fork": false,
                    "language": "Lua",
                    "full_name": "spring/devgame.sdd",
                    "default_branch": "master"
                    },
                    {
                    "id": 17774898,
                    "name": "E323AI",
                    "description": "An Artificial Intelligence for Spring",
                    "url": "https://api.github.com/repos/spring/E323AI",
                    "fork": true,
                    "language": "C++",
                    "full_name": "spring/E323AI",
                    "default_branch": "master"
                    },
                    {
                    "id": 142215109,
                    "name": "Glenda",
                    "description": "Spring-RTS bridge for Matrix.org",
                    "url": "https://api.github.com/repos/spring/Glenda",
                    "fork": true,
                    "language": "Python",
                    "full_name": "spring/Glenda",
                    "default_branch": "master"
                    },
                    {
                    "id": 13298010,
                    "name": "HughAI",
                    "description": "HughAI Java AI for Spring",
                    "url": "https://api.github.com/repos/spring/HughAI",
                    "fork": true,
                    "language": "Java",
                    "full_name": "spring/HughAI",
                    "default_branch": "master"
                    },
                    {
                    "id": 1710956,
                    "name": "JUnitSync",
                    "description": "Java wrapper for the Spring RTS info library",
                    "url": "https://api.github.com/repos/spring/JUnitSync",
                    "fork": false,
                    "language": "Java",
                    "full_name": "spring/JUnitSync",
                    "default_branch": "master"
                    },
                    {
                    "id": 11217686,
                    "name": "KAIK",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/KAIK",
                    "fork": true,
                    "language": "C++",
                    "full_name": "spring/KAIK",
                    "default_branch": "master"
                    },
                    {
                    "id": 1026615,
                    "name": "LobbyProtocol",
                    "description": "lobby protocol for the spring rts engine",
                    "url": "https://api.github.com/repos/spring/LobbyProtocol",
                    "fork": false,
                    "language": "XSLT",
                    "full_name": "spring/LobbyProtocol",
                    "default_branch": "master"
                    },
                    {
                    "id": 3095423,
                    "name": "luasocket",
                    "description": "socket support for lua (a fork of http://w3.impa.br/~diego/software/luasocket/)",
                    "url": "https://api.github.com/repos/spring/luasocket",
                    "fork": true,
                    "language": "C",
                    "full_name": "spring/luasocket",
                    "default_branch": "master"
                    },
                    {
                    "id": 8069078,
                    "name": "Map-Blueprint",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/Map-Blueprint",
                    "fork": true,
                    "language": "Lua",
                    "full_name": "spring/Map-Blueprint",
                    "default_branch": "master"
                    },
                    {
                    "id": 329990,
                    "name": "MapConv",
                    "description": "A cross platform SMF map compiler for spring",
                    "url": "https://api.github.com/repos/spring/MapConv",
                    "fork": true,
                    "language": "C++",
                    "full_name": "spring/MapConv",
                    "default_branch": "master"
                    },
                    {
                    "id": 3585374,
                    "name": "maven-springrts-parent",
                    "description": "Common parent for Spring RTS related Maven projects",
                    "url": "https://api.github.com/repos/spring/maven-springrts-parent",
                    "fork": false,
                    "language": null,
                    "full_name": "spring/maven-springrts-parent",
                    "default_branch": "master"
                    },
                    {
                    "id": 7442564,
                    "name": "MelBot",
                    "description": "spring lobby bot ",
                    "url": "https://api.github.com/repos/spring/MelBot",
                    "fork": false,
                    "language": "Lua",
                    "full_name": "spring/MelBot",
                    "default_branch": "master"
                    },
                    {
                    "id": 30812880,
                    "name": "menu-game.sdd",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/menu-game.sdd",
                    "fork": false,
                    "language": "Lua",
                    "full_name": "spring/menu-game.sdd",
                    "default_branch": "master"
                    },
                    {
                    "id": 30812884,
                    "name": "menu-map.sdd",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/menu-map.sdd",
                    "fork": false,
                    "language": "Lua",
                    "full_name": "spring/menu-map.sdd",
                    "default_branch": "master"
                    },
                    {
                    "id": 613842,
                    "name": "mingwlibs",
                    "description": "Spring RTS MinGW Libraries",
                    "url": "https://api.github.com/repos/spring/mingwlibs",
                    "fork": false,
                    "language": "C",
                    "full_name": "spring/mingwlibs",
                    "default_branch": "master"
                    },
                    {
                    "id": 49453477,
                    "name": "mingwlibs64",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/mingwlibs64",
                    "fork": false,
                    "language": "C++",
                    "full_name": "spring/mingwlibs64",
                    "default_branch": "master"
                    },
                    {
                    "id": 25228977,
                    "name": "modelbase",
                    "description": "svn to git conversation of http://springrts.com/svn/modelbase",
                    "url": "https://api.github.com/repos/spring/modelbase",
                    "fork": false,
                    "language": "Lua",
                    "full_name": "spring/modelbase",
                    "default_branch": "master"
                    },
                    {
                    "id": 866546,
                    "name": "pr-downloader",
                    "description": "console downloader for spring maps/games written in c++",
                    "url": "https://api.github.com/repos/spring/pr-downloader",
                    "fork": false,
                    "language": "C++",
                    "full_name": "spring/pr-downloader",
                    "default_branch": "master"
                    },
                    {
                    "id": 719988,
                    "name": "Python",
                    "description": "Python AI Interface plugin for the Spring RTS engine",
                    "url": "https://api.github.com/repos/spring/Python",
                    "fork": false,
                    "language": "Python",
                    "full_name": "spring/Python",
                    "default_branch": "master"
                    },
                    {
                    "id": 3170656,
                    "name": "pyunitsync",
                    "description": "pybindgen based bindings for spring engine's unitsync",
                    "url": "https://api.github.com/repos/spring/pyunitsync",
                    "fork": false,
                    "language": "Python",
                    "full_name": "spring/pyunitsync",
                    "default_branch": "master"
                    },
                    {
                    "id": 8069104,
                    "name": "rapid",
                    "description": "deprecated, use https://github.com/spring/pr-downloader (was: Commandline client for
                    Spring rapid downloading system)",
                    "url": "https://api.github.com/repos/spring/rapid",
                    "fork": true,
                    "language": "Python",
                    "full_name": "spring/rapid",
                    "default_branch": "master"
                    },
                    {
                    "id": 9815285,
                    "name": "RapidTools",
                    "description": "migrated to https://github.com/spring/pr-downloader",
                    "url": "https://api.github.com/repos/spring/RapidTools",
                    "fork": true,
                    "language": null,
                    "full_name": "spring/RapidTools",
                    "default_branch": "master"
                    },
                    {
                    "id": 11771385,
                    "name": "relayhost",
                    "description": "Spring RTS Relayed Hosts for springlobby",
                    "url": "https://api.github.com/repos/spring/relayhost",
                    "fork": true,
                    "language": "Python",
                    "full_name": "spring/relayhost",
                    "default_branch": "master"
                    },
                    {
                    "id": 66634456,
                    "name": "Shard",
                    "description": "A reprogrammable AI framework for the Spring Engine",
                    "url": "https://api.github.com/repos/spring/Shard",
                    "fork": true,
                    "language": "Lua",
                    "full_name": "spring/Shard",
                    "default_branch": "master"
                    },
                    {
                    "id": 95456,
                    "name": "spring",
                    "description": "A powerful free cross-platform RTS game engine",
                    "url": "https://api.github.com/repos/spring/spring",
                    "fork": false,
                    "language": "C++",
                    "full_name": "spring/spring",
                    "default_branch": "develop"
                    },
                    {
                    "id": 70375079,
                    "name": "spring-ai-includes",
                    "description": "repo containing generated files for building a spring ai (currently only shard)",
                    "url": "https://api.github.com/repos/spring/spring-ai-includes",
                    "fork": false,
                    "language": "C++",
                    "full_name": "spring/spring-ai-includes",
                    "default_branch": "master"
                    },
                    {
                    "id": 2727705,
                    "name": "spring-infolog",
                    "description": null,
                    "url": "https://api.github.com/repos/spring/spring-infolog",
                    "fork": true,
                    "language": "Python",
                    "full_name": "spring/spring-infolog",
                    "default_branch": "master"
                    }
                    ],
                    "created_at": "2008-12-21T13:55:55"
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>
        <con:restMockAction name="/github/api/v1/users//repos" method="GET"
                            resourcePath="/github/api/v1/users/spring/repos" id="d139a001-07da-4540-bf75-037bf33d7b2d">
            <con:settings/>
            <con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>/*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") )
                {
                // return the name of the response you want to dispatch
                return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") )
                {
                // return the name of the response you want to dispatch
                return "Response Stockholm"
                }
                else if( queryString.contains("london") )
                {
                // return the name of the response you want to dispatch
                return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") )
                {
                // return the name of the response you want to dispatch
                return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") )
                {
                // return the name of the response you want to dispatch
                return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="50b11263-7573-4de5-919f-0f20fd1f826d" httpResponseStatus="200"
                          mediaType="application/json">
                <con:settings/>
                <con:responseContent>[
                    {
                    "id": 158075523,
                    "name": "mock-jasper-reports-tutorial",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/jasper-reports-tutorial",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/jasper-reports-tutorial",
                    "default_branch": "master"
                    },
                    {
                    "id": 128975740,
                    "name": "java6-rest-clients",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/java6-rest-clients",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/java6-rest-clients",
                    "default_branch": "master"
                    },
                    {
                    "id": 129655315,
                    "name": "jaxb-examples",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/jaxb-examples",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/jaxb-examples",
                    "default_branch": "master"
                    },
                    {
                    "id": 127571892,
                    "name": "maven-packaging",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/maven-packaging",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/maven-packaging",
                    "default_branch": "master"
                    },
                    {
                    "id": 148994759,
                    "name": "perl-scripts",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/perl-scripts",
                    "fork": false,
                    "language": "Perl",
                    "full_name": "amdouni-mohamed-ali/perl-scripts",
                    "default_branch": "master"
                    },
                    {
                    "id": 127055003,
                    "name": "spring-boot-batch-examples",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-boot-batch-examples",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-boot-batch-examples",
                    "default_branch": "master"
                    },
                    {
                    "id": 181209859,
                    "name": "spring-boot-examples",
                    "description": "demonstrating some spring boot features",
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-boot-examples",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-boot-examples",
                    "default_branch": "master"
                    },
                    {
                    "id": 126095451,
                    "name": "spring-boot-java-6",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-boot-java-6",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-boot-java-6",
                    "default_branch": "master"
                    },
                    {
                    "id": 129970736,
                    "name": "spring-boot-java-6-wildfly",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-boot-java-6-wildfly",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-boot-java-6-wildfly",
                    "default_branch": "master"
                    },
                    {
                    "id": 140936467,
                    "name": "spring-boot-multiple-datasources",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-boot-multiple-datasources",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-boot-multiple-datasources",
                    "default_branch": "master"
                    },
                    {
                    "id": 140206001,
                    "name": "spring-data-database-views",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring-data-database-views",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring-data-database-views",
                    "default_branch": "master"
                    },
                    {
                    "id": 124222540,
                    "name": "spring4-examples",
                    "description": null,
                    "url": "https://api.github.com/repos/amdouni-mohamed-ali/spring4-examples",
                    "fork": false,
                    "language": "Java",
                    "full_name": "amdouni-mohamed-ali/spring4-examples",
                    "default_branch": "master"
                    }
                    ]
                </con:responseContent>
            </con:response>
        </con:restMockAction>
        <con:restMockAction name="/github/api/v1/users//repos/Shared" method="GET"
                            resourcePath="/github/api/v1/users/spring/repos/Shared"
                            id="f46c92e8-0295-47c1-9d51-833e177c9544">
            <con:settings/>
            <con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
            <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
            <con:dispatchPath>/*
                // Script dispatcher is used to select a response based on the incoming request.
                // Here are few examples showing how to match based on path, query param, header and body

                // Match based on path
                def requestPath = mockRequest.getPath()
                log.info "Path: "+ requestPath

                if( requestPath.contains("json") )
                {
                // return the name of the response you want to dispatch
                return "JSON Response"
                }


                // Match based on query parameter
                def queryString = mockRequest.getRequest().getQueryString()
                log.info "QueryString: " + queryString

                if( queryString.contains("stockholm") )
                {
                // return the name of the response you want to dispatch
                return "Response Stockholm"
                }
                else if( queryString.contains("london") )
                {
                // return the name of the response you want to dispatch
                return "Response London"
                }


                // Match based on header
                def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
                log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

                if( acceptEncodingHeaderList.contains("gzip,deflate") )
                {
                // return the name of the response you want to dispatch
                return "GZiped Response"
                }


                // Match based on body
                def requestBody = mockRequest.getRequestContent()
                log.info "Request body: " + requestBody

                if( requestBody.contains("some data") )
                {
                // return the name of the response you want to dispatch
                return "Response N"
                }
                */
            </con:dispatchPath>
            <con:response name="Response 1" id="856e3ba5-5584-4dab-9c37-4549ef56ee1f" httpResponseStatus="200"
                          mediaType="application/json">
                <con:settings/>
                <con:responseContent>{
                    "id": 50173071,
                    "name": "mock-mysql-connector-cpp",
                    "description": "MySQL Connector/C++ is a MySQL database connector for C++. It lets you develop C++
                    and C applications that connect to MySQL Server.",
                    "url": "https://api.github.com/repos/mysql/mysql-connector-cpp",
                    "fork": false,
                    "language": "C++",
                    "full_name": "mysql/mysql-connector-cpp",
                    "default_branch": "master"
                    }
                </con:responseContent>
            </con:response>
        </con:restMockAction>
    </con:restMockService>
    <con:properties/>
    <con:wssContainer/>
    <con:oAuth2ProfileContainer/>
    <con:oAuth1ProfileContainer/>
</con:soapui-project>